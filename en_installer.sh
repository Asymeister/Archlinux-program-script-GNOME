#!/bin/bash

# =============================================================================
# PROGRAM INSTALLER SCRIPT - Arch Linux GNOME (Final version)
# Version: 1.0
# Description: Program installation
# =============================================================================

# BASIC ERROR HANDLING
# The script will exit if a command fails.
set -eo pipefail

# =============================================================================
# COLORS and FORMATTING
# =============================================================================
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
ORANGE='\033[38;5;214m'
BOLD='\033[1m'
RESET='\033[0m'

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

# Display divider
print_divider() {
Â  Â  echo -e "${CYAN}"
Â  Â  echo "[================================================================================]"
Â  Â  echo -e "${RESET}"
}

# Display title
print_title() {
Â  Â  echo -e "${MAGENTA}"
Â  Â  print_divider
Â  Â  echo "Â  $1"
Â  Â  print_divider
Â  Â  echo -e "${RESET}"
}

# Success message
print_success() {
Â  Â  echo -e "${GREEN}âœ“${RESET} $1"
}

# Error message
print_error() {
Â  Â  echo -e "${RED}âœ—${RESET} $1" >&2
}

# Warning message
print_warning() {
Â  Â  echo -e "${YELLOW}âš ${RESET} $1"
}

# Information message
print_info() {
Â  Â  echo -e "${BLUE}â„¹${RESET} $1"
}

# Program installation message
print_install_start() {
Â  Â  echo -e "${GREEN}ðŸš€ ${BOLD}Installing:${RESET} ${GREEN}$1${RESET}"
}

# Installation function that handles errors and warnings
install_package() {
Â  Â  local source=$1
Â  Â  local package=$2
Â  Â  local output=""
Â  Â  local status=1

Â  Â  case "$source" in
Â  Â  Â  Â  "Pacman")
Â  Â  Â  Â  Â  Â  output=$(sudo pacman -S --noconfirm "$package" 2>&1)
Â  Â  Â  Â  Â  Â  status=$?
Â  Â  Â  Â  Â  Â  if [ $status -ne 0 ] && (echo "$output" | grep -q "there is nothing to do" || echo "$output" | grep -q "is up to date"); then
Â  Â  Â  Â  Â  Â  Â  Â  print_warning "$package is already installed!"
Â  Â  Â  Â  Â  Â  Â  Â  return 0
Â  Â  Â  Â  Â  Â  elif [ $status -eq 0 ]; then
Â  Â  Â  Â  Â  Â  Â  Â  return 0
Â  Â  Â  Â  Â  Â  fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Yay")
Â  Â  Â  Â  Â  Â  output=$(yay -S --noconfirm "$package" 2>&1)
Â  Â  Â  Â  Â  Â  status=$?
Â  Â  Â  Â  Â  Â  if [ $status -ne 0 ] && (echo "$output" | grep -q "there is nothing to do" || echo "$output" | grep -q "is up to date"); then
Â  Â  Â  Â  Â  Â  Â  Â  print_warning "$package is already installed!"
Â  Â  Â  Â  Â  Â  Â  Â  return 0
Â  Â  Â  Â  Â  Â  elif [ $status -eq 0 ]; then
Â  Â  Â  Â  Â  Â  Â  Â  return 0
Â  Â  Â  Â  Â  Â  fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Flatpak")
Â  Â  Â  Â  Â  Â  if flatpak install -y --noninteractive flathub "$package"; then
Â  Â  Â  Â  Â  Â  Â  Â  return 0
Â  Â  Â  Â  Â  Â  fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  esac
Â  Â  return 1
}

# =============================================================================
# MAIN INSTALLATION PROCESS
# =============================================================================

clear
print_title "PROGRAM INSTALLER - Arch Linux"
print_info "Starting the installation process..."
echo

# 1. Check and install Yay (automatic)
print_info "1. Checking for Yay AUR helper..."
if ! command -v yay &> /dev/null; then
Â  Â  print_warning "Yay not found, installing automatically..."
Â  Â Â 
Â  Â  print_install_start "Yay AUR helper"
Â  Â  TMP_DIR=$(mktemp -d)
Â  Â  if git clone https://aur.archlinux.org/yay-bin.git "$TMP_DIR/yay-bin"; then
Â  Â  Â  Â  cd "$TMP_DIR/yay-bin"
Â  Â  Â  Â  if makepkg -si --noconfirm; then
Â  Â  Â  Â  Â  Â  print_success "Yay installed successfully!"
Â  Â  Â  Â  else
Â  Â  Â  Â  Â  Â  print_error "Error occurred while compiling/installing Yay."
Â  Â  Â  Â  Â  Â  exit 1
Â  Â  Â  Â  fi
Â  Â  Â  Â  cd - > /dev/null
Â  Â  Â  Â  rm -rf "$TMP_DIR"
Â  Â  else
Â  Â  Â  Â  print_error "Error occurred while downloading Yay source."
Â  Â  Â  Â  rm -rf "$TMP_DIR"
Â  Â  Â  Â  exit 1
Â  Â  fi
else
Â  Â  print_success "Yay is already installed!"
fi
echo

# 2. Check and install Flatpak (automatic)
print_info "2. Checking for Flatpak..."
if ! command -v flatpak &> /dev/null; then
Â  Â  print_warning "Flatpak not found, installing automatically..."
Â  Â Â 
Â  Â  print_install_start "Flatpak"
Â  Â  if sudo pacman -S --noconfirm flatpak; then
Â  Â  Â  Â  print_success "Flatpak installed successfully!"
Â  Â  Â  Â Â 
Â  Â  Â  Â  # Add Flatpak remote
Â  Â  Â  Â  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
Â  Â  Â  Â  print_success "Flathub repository added!"
Â  Â  else
Â  Â  Â  Â  print_error "Error occurred while installing Flatpak."
Â  Â  Â  Â  exit 1
Â  Â  fi
else
Â  Â  print_success "Flatpak is already installed!"
fi
echo

# 3. Install essential packages (automatic)
print_info "3. Installing essential packages..."
sudo pacman -S --noconfirm base-devel git unzip p7zip zip curl
sudo pacman -S --noconfirm pipewire-pulse pipewire-alsa pipewire-jack wireplumber
sudo pacman -S --noconfirm sassc dkms cabextract calf
print_success "Essential packages installed successfully!"
echo

# 4. Program selection - WITH ZENITY DIALOG
print_info "4. Program selection..."
# Store options separately for easier management
declare -A programs=(
Â  Â  ["Bluetooth"]="gnome-bluetooth"
Â  Â  ["Bottles"]="com.usebottles.bottles"
Â  Â  ["Corectrl"]="corectrl"
Â  Â  ["Discord"]="com.discordapp.Discord"
Â  Â  ["Double Commander"]="doublecmd-qt6"
Â  Â  ["EasyEffects"]="easyeffects"
Â  Â  ["Fastfetch"]="fastfetch"
Â  Â  ["Gamemode"]="gamemode"
Â  Â  ["Heroic Games Launcher"]="com.heroicgameslauncher.hgl"
Â  Â  ["Jellyfin Media Player"]="jellyfin-media-player"
Â  Â  ["KDEConnect"]="kdeconnect"
Â  Â  ["KeePassXC"]="keepassxc"
Â  Â  ["KVM/QEMU"]="qemu virt-manager libvirt edk2-ovmf dnsmasq bridge-utils openbsd-netcat"
Â  Â  ["Lutris"]="lutris"
Â  Â  ["MangoHud/Goverlay"]="mangohud goverlay"
Â  Â  ["OBS Studio"]="com.obsproject.Studio"
Â  Â  ["OnlyOffice"]="onlyoffice-bin"
Â  Â  ["Pamac"]="pamac-aur"
Â  Â  ["Spotify"]="spotify-launcher"
Â  Â  ["VLC"]="org.videolan.VLC"
Â  Â  ["Vivaldi"]="vivaldi"
)

CHOICES=$(zenity --list --checklist \
Â  Â  --title="Select Programs" \
Â  Â  --width=900 \
Â  Â  --height=1100 \
Â  Â  --column="Select" \
Â  Â  --column="Program Name" \
Â  Â  --column="Source" \
Â  Â  --column="Description" \
Â  Â  FALSE "Bluetooth" "Pacman" "GNOME Bluetooth switch" \
Â  Â  FALSE "Bottles" "Flatpak" "Wine environment for programs and games" \
Â  Â  FALSE "Corectrl" "Pacman" "ATI and NVIDIA GPU controller" \
Â  Â  FALSE "Discord" "Flatpak" "Voice and text chat application" \
Â  Â  FALSE "Double Commander" "Pacman" "Dual-pane file manager (Qt6)" \
Â  Â  FALSE "EasyEffects" "Pacman" "Audio effects for Pipewire" \
Â  Â  FALSE "Fastfetch" "Pacman" "System information in the terminal" \
Â  Â  FALSE "Gamemode" "Pacman" "Utility to increase game performance" \
Â  Â  FALSE "Heroic Games Launcher" "Flatpak" "Game launcher for Epic Games and GOG" \
Â  Â  FALSE "Jellyfin Media Player" "Yay" "Jellyfin media server client" \
Â  Â  FALSE "KDEConnect" "Pacman" "Connect phone and desktop computer" \
Â  Â  FALSE "KeePassXC" "Pacman" "Password manager" \
Â  Â  FALSE "KVM/QEMU" "Pacman" "Software package for running virtual machines" \
Â  Â  FALSE "Lutris" "Pacman" "Game launcher for all sources" \
Â  Â  FALSE "MangoHud/Goverlay" "Pacman" "Performance monitor for games" \
Â  Â  FALSE "OBS Studio" "Flatpak" "Screen recording and streaming" \
Â  Â  FALSE "OnlyOffice" "Yay" "Office suite (binary version)" \
Â  Â  FALSE "Pamac" "Yay" "Graphical package manager" \
Â  Â  FALSE "Steam" "Pacman" "Music streaming client" \
Â  Â  FALSE "Spotify" "Pacman" "Music streaming client" \
Â  Â  FALSE "VLC" "Flatpak" "Multimedia player" \
Â  Â  FALSE "Vivaldi" "Pacman" "Versatile web browser" \
Â  Â  --print-column=2)


# Exit if the user did not select anything
if [ -z "$CHOICES" ]; then
Â  Â  print_warning "No programs selected. The script will exit."
Â  Â  zenity --info --title="No Selection" --text="No programs selected. The script will exit." --width=300
Â  Â  exit 0
fi

# 5. Install programs (with error handling)
print_info "5. Installing selected programs..."
IFS='|' read -ra PROGRAMS <<< "$CHOICES"

# SUCCESSFUL/FAILED INSTALLATIONS SUMMARY
declare -a SUCCESSFUL_INSTALLS
declare -a FAILED_INSTALLS

for PROGRAM in "${PROGRAMS[@]}"; do
Â  Â  print_install_start "$PROGRAM"
Â  Â Â 
Â  Â  INSTALL_SUCCESS=false
Â  Â Â 
Â  Â  # Find the program's source from the package name
Â  Â  SOURCE=$(grep -F "$PROGRAM" <<< "$CHOICES" | cut -d'|' -f3)

Â  Â  case "$PROGRAM" in
Â  Â  Â  Â  "Bluetooth")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "gnome-bluetooth"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Bottles")
Â  Â  Â  Â  Â  Â  if install_package "Flatpak" "com.usebottles.bottles"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Corectrl")
	Â  Â  print_install_start "CoreCTRL and user settings"
	Â  Â Â 
	Â  Â  # Install with pacman
	Â  Â  if sudo pacman -S --noconfirm corectrl; then
		print_success "CoreCTRL installed successfully."
	Â  Â  else
		print_error "Error: Failed to install CoreCTRL."
		INSTALL_SUCCESS=false
		continue
	Â  Â  fi

	Â  Â  # Set up autostart
	Â  Â  mkdir -p ~/.config/autostart
	Â  Â  if cp /usr/share/applications/org.corectrl.CoreCtrl.desktop ~/.config/autostart/; then
		print_success "CoreCTRL autostart configured."
	Â  Â  else
		print_warning "Warning: Failed to configure CoreCTRL autostart."
	Â  Â  fi

	Â  Â  # Add Polkit rule
	Â  Â  if echo "polkit.addRule(function(action, subject) {Â  Â  if ((action.id == \"org.corectrl.helper.init\" ||Â  Â  Â  Â  Â action.id == \"org.corectrl.helperkiller.init\") &&Â  Â  Â  Â  subject.local == true &&Â  Â  Â  Â  subject.active == true &&Â  Â  Â  Â  subject.isInGroup(\"$USER\")) {Â  Â  Â  Â  Â  Â  return polkit.Result.YES;Â  Â  }});" | sudo tee /etc/polkit-1/rules.d/90-corectrl.rules >/dev/null; then
		print_success "Polkit rule added for user permissions."
	Â  Â  else
		print_error "Error: Failed to add Polkit rule."
		INSTALL_SUCCESS=false
		continue
	Â  Â  fi

	Â  Â  # Modify kernel parameters depending on the bootloader
	Â  Â  if [ -d "/boot/loader/entries" ]; then
		# For systemd-boot
		if sudo sed -i '/options/s/$/ amdgpu.ignore_min_pcap=1 amdgpu.ppfeaturemask=0xffffffff /' /boot/loader/entries/*.conf; then
		Â  Â  print_success "Kernel parameters modified (systemd-boot)."
		else
		Â  Â  print_error "Error: Failed to modify kernel parameters."
		Â  Â  INSTALL_SUCCESS=false
		Â  Â  continue
		fi
	Â  Â  else
		# For GRUB
		if sudo sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 amdgpu.ignore_min_pcap=1 amdgpu.ppfeaturemask=0xffffffff"/' /etc/default/grub; then
		Â  Â  print_success "Kernel parameters added to GRUB configuration."
		Â  Â  print_info "Updating GRUB configuration..."
		Â  Â  if sudo grub-mkconfig -o /boot/grub/grub.cfg; then
		Â  Â  Â  Â  print_success "GRUB configuration updated successfully."
		Â  Â  else
		Â  Â  Â  Â  print_error "Error: Failed to update GRUB configuration."
		Â  Â  Â  Â  INSTALL_SUCCESS=false
		Â  Â  Â  Â  continue
		Â  Â  fi
		else
		Â  Â  print_error "Error: Failed to modify GRUB configuration file."
		Â  Â  INSTALL_SUCCESS=false
		Â  Â  continue
		fi
	Â  Â  fi

	Â  Â  INSTALL_SUCCESS=true
	Â  Â  ;;
Â  Â  Â  Â  "Discord")
Â  Â  Â  Â  Â  Â  if install_package "Flatpak" "com.discordapp.Discord"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Double Commander")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "doublecmd-qt6"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "EasyEffects")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "easyeffects"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Fastfetch")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "fastfetch"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Gamemode")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "gamemode"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Heroic Games Launcher")
Â  Â  Â  Â  Â  Â  if install_package "Flatpak" "com.heroicgameslauncher.hgl"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Jellyfin Media Player")
Â  Â  Â  Â  Â  Â  if install_package "Yay" "jellyfin-media-player"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "KDEConnect")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "kdeconnect"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "KeePassXC")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "keepassxc"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Lutris")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "lutris"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "MangoHud/Goverlay")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "mangohud goverlay"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "OBS Studio")
Â  Â  Â  Â  Â  Â  if install_package "Flatpak" "com.obsproject.Studio"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "OnlyOffice")
Â  Â  Â  Â  Â  Â  if install_package "Yay" "onlyoffice-bin"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Pamac")
Â  Â  Â  Â  Â  Â  if install_package "Yay" "pamac-aur"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Steam")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "steam"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Spotify")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "spotify-launcher"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "VLC")
Â  Â  Â  Â  Â  Â  if install_package "Flatpak" "org.videolan.VLC"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "Vivaldi")
Â  Â  Â  Â  Â  Â  if install_package "Pacman" "vivaldi"; then INSTALL_SUCCESS=true; fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  Â  Â  "KVM/QEMU")
Â  Â  Â  Â  Â  Â  # Confirmed, robust installation process
Â  Â  Â  Â  Â  Â  print_install_start "KVM/QEMU and dependencies"
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  # Install packages in a single line
Â  Â  Â  Â  Â  Â  if sudo pacman -S --noconfirm qemu virt-manager libvirt edk2-ovmf dnsmasq bridge-utils openbsd-netcat; then
Â  Â  Â  Â  Â  Â  Â  Â  print_success "KVM/QEMU packages installed successfully."
Â  Â  Â  Â  Â  Â  else
Â  Â  Â  Â  Â  Â  Â  Â  print_error "Error: Failed to install KVM/QEMU packages."
Â  Â  Â  Â  Â  Â  Â  Â  INSTALL_SUCCESS=false
Â  Â  Â  Â  Â  Â  Â  Â  continue
Â  Â  Â  Â  Â  Â  fi

Â  Â  Â  Â  Â  Â  # Add user to the correct groups
Â  Â  Â  Â  Â  Â  print_info "Adding user to 'kvm', 'input', and 'libvirt' groups..."
Â  Â  Â  Â  Â  Â  if sudo usermod -aG kvm,input,libvirt "$USER"; then
Â  Â  Â  Â  Â  Â  Â  Â  print_success "User successfully added to required groups."
Â  Â  Â  Â  Â  Â  else
Â  Â  Â  Â  Â  Â  Â  Â  print_error "Error: Failed to add user to groups."
Â  Â  Â  Â  Â  Â  Â  Â  INSTALL_SUCCESS=false
Â  Â  Â  Â  Â  Â  Â  Â  continue
Â  Â  Â  Â  Â  Â  fi

Â  Â  Â  Â  Â  Â  # Modify libvirt configuration file
Â  Â  Â  Â  Â  Â  print_info "Modifying '/etc/libvirt/qemu.conf' configuration file..."
Â  Â  Â  Â  Â  Â  if sudo sed -i 's/#user = "root"/user = "'"$USER"'"/' /etc/libvirt/qemu.conf &&
Â  Â  Â  Â  Â  Â  Â  Â sudo sed -i 's/#group = "root"/group = "kvm"/' /etc/libvirt/qemu.conf; then
Â  Â  Â  Â  Â  Â  Â  Â  print_success "'qemu.conf' file modified successfully."
Â  Â  Â  Â  Â  Â  else
Â  Â  Â  Â  Â  Â  Â  Â  print_error "Error: Failed to modify 'qemu.conf'."
Â  Â  Â  Â  Â  Â  Â  Â  INSTALL_SUCCESS=false
Â  Â  Â  Â  Â  Â  Â  Â  continue
Â  Â  Â  Â  Â  Â  fi

Â  Â  Â  Â  Â  Â  # Enable and start the libvirtd service
Â  Â  Â  Â  Â  Â  print_info "Enabling and starting the 'libvirtd' service..."
Â  Â  Â  Â  Â  Â  if sudo systemctl enable --now libvirtd.service; then
Â  Â  Â  Â  Â  Â  Â  Â  print_success "The 'libvirtd' service started successfully."
Â  Â  Â  Â  Â  Â  else
Â  Â  Â  Â  Â  Â  Â  Â  print_error "Error: Failed to start the 'libvirtd' service."
Â  Â  Â  Â  Â  Â  Â  Â  INSTALL_SUCCESS=false
Â  Â  Â  Â  Â  Â  Â  Â  continue
Â  Â  Â  Â  Â  Â  fi

Â  Â  Â  Â  Â  Â  # Set up automatic startup for the default network
Â  Â  Â  Â  Â  Â  print_info "Enabling automatic startup for the 'default' virtual network..."
Â  Â  Â  Â  Â  Â  if sudo virsh net-autostart default; then
Â  Â  Â  Â  Â  Â  Â  Â  print_success "Automatic startup for the 'default' network configured."
Â  Â  Â  Â  Â  Â  else
Â  Â  Â  Â  Â  Â  Â  Â  print_error "Error: Failed to configure automatic startup for the 'default' network."
Â  Â  Â  Â  Â  Â  Â  Â  INSTALL_SUCCESS=false
Â  Â  Â  Â  Â  Â  Â  Â  continue
Â  Â  Â  Â  Â  Â  fi
Â  Â  Â  Â  Â  Â  ;;
Â  Â  esac
Â  Â Â 
Â  Â  if [ "$INSTALL_SUCCESS" = true ]; then
Â  Â  Â  Â  print_success "$PROGRAM installed successfully!"
Â  Â  Â  Â  SUCCESSFUL_INSTALLS+=("$PROGRAM")
Â  Â  else
Â  Â  Â  Â  print_error "Error: Failed to install '$PROGRAM'."
Â  Â  Â  Â  FAILED_INSTALLS+=("$PROGRAM")
Â  Â  fi
Â  Â  echo
Â  Â Â 
Â  Â  sleep 0.5
done

# 6. Final summary
print_title "INSTALLATION COMPLETE"

if [ ${#SUCCESSFUL_INSTALLS[@]} -gt 0 ]; then
Â  Â  print_success "The following programs were installed successfully:"
Â  Â  for prog in "${SUCCESSFUL_INSTALLS[@]}"; do
Â  Â  Â  Â  echo -e "${GREEN}Â  - $prog${RESET}"
Â  Â  done
Â  Â  echo
fi

if [ ${#FAILED_INSTALLS[@]} -gt 0 ]; then
Â  Â  print_warning "The following programs failed to install:"
Â  Â  for prog in "${FAILED_INSTALLS[@]}"; do
Â  Â  Â  Â  echo -e "${RED}Â  - $prog${RESET}"
Â  Â  done
Â  Â  echo
fi

# Ask about GNOME theme settings (if GNOME is running)
if [[ "$XDG_CURRENT_DESKTOP" == "GNOME" ]]; then
Â  Â  if zenity --question --title="Set Theme" --text="Would you like to set the system to a dark theme (Adwaita-dark)?\n\nThis setting is recommended for the following programs:\n- KVM/QEMU\n- Discord\n- OBS Studio" --width=300; then
Â  Â  Â  Â  print_info "Starting GNOME theme configuration script..."
Â  Â  Â  Â  if [ -f "gnome_theming.sh" ]; then
Â  Â  Â  Â  Â  Â  chmod +x gnome_theming.sh
Â  Â  Â  Â  Â  Â  ./gnome_theming.sh
Â  Â  Â  Â  Â  Â  print_success "Theme setup completed successfully."
Â  Â  Â  Â  else
Â  Â  Â  Â  Â  Â  print_error "The 'gnome_theming.sh' script was not found. Theme setup skipped."
Â  Â  Â  Â  fi
Â  Â  fi
fi

# ...
# 7. Reboot with progress bar and cancellation
if zenity --question --title="Reboot" --text="The installation is complete. Would you like to reboot now for the changes to take effect?" --width=300; then
Â  Â  # Progress bar with cancellation
Â  Â  if zenity --progress --title="Reboot" --text="The system will reboot in 10 seconds..." --percentage=0 --auto-close --timeout=10 < <(
Â  Â  Â  Â  for i in {0..10}; do
Â  Â  Â  Â  Â  Â  echo $((i * 10))
Â  Â  Â  Â  Â  Â  echo "# The system will reboot in $((10 - i)) seconds..."
Â  Â  Â  Â  Â  Â  sleep 1
Â  Â  Â  Â  done
Â  Â  ); then
Â  Â  Â  Â  # If the progress bar finished successfully (timeout)
Â  Â  Â  Â  print_info "Rebooting system..."
Â  Â  Â  Â  print_divider
Â  Â  Â  Â  echo -e "${GREEN}${BOLD}The program installer script has completed successfully!${RESET}"
Â  Â  Â  Â  print_divider
Â  Â  Â  Â  sudo systemctl reboot
Â  Â  else
Â  Â  Â  Â  # If the user pressed the Cancel button
Â  Â  Â  Â  print_warning "Reboot aborted."
Â  Â  Â  Â  zenity --info --title="Aborted" --text="The reboot was aborted. To apply the changes, please log out and log back in."
Â  Â  fi
else
Â  Â  print_info "Reboot skipped."
Â  Â  zenity --info --title="Installation Complete" --text="The system will not reboot. To apply the changes, please log out and log back in."
fi
